{"name":"Selective ORM","tagline":"Selective Object-Relational Mapper","body":"Selective Object-Relational Mapper\r\n=============\r\n\r\nSelective ORM is a database abstraction layer that simplifies working with databases. It is fully object-oriented, and infers the database schema (tables/columns/relationships) automatically, so you don't have to repeat it in your code.\r\n\r\n* Build Status: [![Build Status](https://travis-ci.org/jamend/selective-orm.svg?branch=master)](https://travis-ci.org/jamend/selective-orm)\r\n* Coverage Status: [![Coverage Status](https://coveralls.io/repos/jamend/selective-orm/badge.png?1)](https://coveralls.io/r/jamend/selective-orm)\r\n\r\nInstalling\r\n==========\r\n\r\nIf you'd like to try Selective pending a stable release, you can add this to your composer.json:\r\n\r\n```javascript\r\n{\r\n    \"require\": {\r\n        \"jamend/selective-orm\": \"dev-master\"\r\n    }\r\n}\r\n```\r\n\r\nUsage\r\n=====\r\n\r\nConnecting to a database\r\n```php\r\n// first argument is the database name\r\n// second argument is the driver implementation class name\r\n// third argument is the parameter array for the driver\r\n$db = new \\selective\\ORM\\Database(\r\n\t'sample',\r\n\t'MySQL', // driver class\r\n\t['host' => 'localhost', 'username' => '...', 'password' => '...'] // MySQL driver parameters\r\n);\r\n```\r\n\r\nGetting a record from the database\r\n```php\r\n$books = $db->Books; // get a Table instance for the Books table in the database\r\n\r\n$book = $books->{12}; // get a Record instance for the book with ID 12\r\n\r\necho $book->title; // columns map directly to properties of the record\r\n```\r\n\r\nLooping through records with a where and order by clause\r\n```php\r\n$someBooks = $db->Books\r\n\t->where('tite LIKE ?', 'The%')\r\n\t->orderBy('datePublished', 'DESC')\r\n; // fluent interface\r\n\r\n// $books will lazy-load the records once you start iterating through them\r\nforeach ($someBooks as $id => $book) {\r\n\techo \"#{$id} => {$book->title} <br />\";\r\n}\r\n```\r\n\r\nCreate book\r\n```php\r\n$newBook = $books->create();\r\n$newBook->title = 'A New Book';\r\n$newBook->datePublished = time();\r\n$newBook->save();\r\n\r\n// $newBook's id is automatically set to the auto-increment ID\r\necho \"New book created with ID {$newBook->getID()}\";\r\n```\r\n\r\nUpdate book\r\n```php\r\n$book = $books->{13};\r\n$book->title = 'A Better Title';\r\n$book->save();\r\n```\r\n\r\nDelete book\r\n```php\r\n$books->{14}->delete();\r\n```\r\n\r\nRelationships\r\n=============\r\n\r\nSelective can also simplify the use of foreign key constraints that are defined in the schema. Here are some examples:\r\n\r\nGet all books by an author\r\n```php\r\n$authors = $db->Authors;\r\n\r\n$author = $authors->{1};\r\n$books = $author->Books; // $books will be the Books table filtered by the author\r\n```\r\n\r\nGet the author of a book\r\n```php\r\n$book = $books->{15};\r\n$author = $book->idAuthor; // $author will be a Record for the author matching the book's idAuthor\r\necho $author->name;\r\n```\r\n\r\nSet the author of a book\r\n```php\r\n$author = $authors->{2}\r\n$book = $books->{16};\r\n\r\n$book->idAuthor = $author; // '2' would also work\r\n$book->save();\r\n```\r\n\r\n**Relationship optimization**\r\n\r\nRelated records are by default lazy loaded, meaning that the author for $book->idAuthor or the book record set for $author->Books will not be loaded until you request them. This is undesirable when working with a record set and its related records in batches, as it will result in many queries to the database being called in a loop. To demonstrate:\r\n\r\n```php\r\nforeach ($db->Books as $book) {\r\n\t// to get every book's author's name, a query must be sent to the database to fetch the book's author\r\n\techo $book->idAuthor->name;\r\n}\r\n```\r\n\r\nTo avoid this, the RecordSet::with($tableName) method can be used to tell Selective to pre-load the related records for a RecordSet:\r\n\r\n```php\r\nforeach ($db->Books->with('Authors') as $book) {\r\n\t// the author for each book will already be pre-loaded using the same query that fetched the books\r\n\techo $book->idAuthor->name;\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}